@using TFG.RulesPenaltiesF1.Web.ViewModels.Penalties;
@model IncidentViewModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var competition = ViewBag.Competition;
    var penalties = (List<PenaltyViewModel>)ViewBag.Penalties;
}

<h1>Add Incident</h1>

<h4>@competition.Name - @competition.Year</h4>
<h5>@Model.Session!.Type</h5>
<hr/>

<div class="row">
    <div class="col-md-6">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group mt-4">
                <input type="hidden" asp-for="CompetitionId" value="@Model.CompetitionId" />
                <input type="hidden" asp-for="SessionId" value="@Model.SessionId" />
                @Html.LabelFor(m => m.ParticipationId, new { })
                @{

                    var driversList = ((List<ParticipationViewModel>)ViewBag.Participations).Select(a => new SelectListItem
            {
                Value = a.Id.ToString(),
                Text = a.Driver!.Name + " - " + a.Competitor!.Name
            });
                }
                @Html.DropDownListFor(m => m.ParticipationId, driversList, new { @class = "form-control"})

                @Html.ValidationMessageFor(m => m.ParticipationId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mt-4">
                <label asp-for="Fact" class="control-label"></label>
                <textarea asp-for="Fact" class="form-control"></textarea>
                <span asp-validation-for="Fact" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                @Html.LabelFor(m => m.ArticleId, new { })
                @{

                    var articlesList = ((List<ArticleViewModel>)ViewBag.Articles).Select(a => new SelectListItem
                    {
                        Value = a.Id.ToString(),
                        Text = a.Content
                    });
                }
                @Html.DropDownListFor(m => m.ArticleId, articlesList, new { @class = "form-control"})

                @Html.ValidationMessageFor(m => m.ArticleId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mt-4">
                @Html.LabelFor(m => m.PenaltyId, new { })
                @{

                    var penaltiesList = penalties.Select(a => new SelectListItem
                    {
                        Value = a.Id.ToString(),
                        Text = a.ToString()
                    });
                }

                <select asp-for="PenaltyId" class="form-control" asp-items="penaltiesList">
                    <option value="-1">&lt;&lt;&lt;No further action&gt;&gt;&gt;</option>
                </select>

                @Html.ValidationMessageFor(m => m.PenaltyId, "", new { @class = "text-danger" })
            </div>
            <div class="form-group mt-4">
                <label asp-for="Reason" class="control-label"></label>
                <textarea asp-for="Reason" class="form-control"></textarea>
                <span asp-validation-for="Reason" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <label asp-for="Fine" class="control-label"></label>
                <input asp-for="Fine" class="form-control" />
                <span asp-validation-for="Fine" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <label asp-for="LicensePoints" class="control-label"></label>
                <input asp-for="LicensePoints" class="form-control" />
                <span asp-validation-for="LicensePoints" class="text-danger"></span>
            </div>
            <div class="form-group mt-4">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        $("#PenaltyId").on("change", function (event) {
            onChangePenalty();
        });

        var penaltyPointsMap = new Map();
        var fineMap = new Map();

        @foreach(var penalty in penalties)
        {
            <text>
                penaltyPointsMap.set(@penalty.Id, @(penalty.PenaltyPoints ? "true" : "false"));
                fineMap.set(@penalty.Id, @(penalty.Fine ? "true" : "false"));
            </text>
        }

        console.log(penaltyPointsMap);
        console.log(fineMap);

        onChangePenalty();

        function onChangePenalty(){

            console.log("Has changed");

            let penaltyId = $("#PenaltyId").val();

            var penaltyPoints = penaltyPointsMap.get(parseInt(penaltyId));
            var fine = fineMap.get(parseInt(penaltyId));

            console.log("Penalty Points: " + penaltyPoints);
            console.log("Fine: " + fine);

            var fine = $("label[for=Fine], #Fine");
            var licensePoints = $("label[for=LicensePoints], #LicensePoints");

            if(penaltyPoints === true){
                licensePoints.show();
            }
            else{
                licensePoints.hide();
            }
            if(fine === true){
                fine.show();
            }
            else{
                fine.hide();
            }

        }

    </script>
}